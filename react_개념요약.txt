babel : 자바스크립트 컴파일러
	사용할 때 바밸 cdn 주소 추가하고
	<script type ="text/babel">로 하고 그 안에 script 작성
JSX : 
	- React 에서는 이벤트가 처리되는 방식, 시간에 따라 state 가 변하는 방식,
	화면에 표시하기 위해 데이터가 준비되는 방식 등 렌더링 로직이 다른 UI 로직과 연결된다
	- React 는 별도의 파일에 마크업과 로직을 넣어 기술을 인위적
	으로 분리하는 대신, 둘 다 포함하는 "컴포넌트"라고 부르는 느슨하게 연결된 유닛으로
	관심사 분리... 
	※js+xml : 태그 끝에 "/" 붙여야함. ex) <LikedButton />

※bable 이 jsx 문법을 React.createElement 로 바꿔줌

※state : UI 요소들중 자주 바뀌는 부분..
※ react event 에서 event listener 함수 선언시 반드시 es6문법의 (e)=>{}
형태로 .! function(e){} → 이런 방식으로 선언하면 내부에 this 를 쓸 때 this
의 주체가 달라진다...
※ this.setState() 의 parameter은 javascript 변수:{} 일 수도 있고
함수형이 들어올 수도 있다.. 함수형:(prevState)=>{} 여기서 prevState는
이전의 state임.
※ this.setState() 는 비동기(async)함수..

※ react 에서 render () {} 에서 dom요소를 선언할 때 
dom 요소에다 ref 라는 속성을 특정 함수로 정의해서 
dom요소에 접근하게 할  수 있다.

※ react 컴포넌트에서 this.setState() 가 실행 될 때 마다(state값이 바뀔 때 마다)
render 함수가 실행된다. 그러므로 render 내부의 이밴트 리스너 함수는
외부에 선언하고 render 내부에서 쓰는 것이 좋음!

※ react 에서는 class를 지양하고 있다(!? 아니 시발 이제와서?ㅡㅡ)

※react 에서 hook란 함수를 통해 요소를 rendering 하는 것을 말함.
	- state가 바뀔 때 마다 함수가 재실행됨.
	- state로 지정하고 싶은 변수는 useState(초기값)으로 할당
		-할당받을 때 let [변수명, 변수 바뀔시 실행할 함수] 로 받음
	- hook에서 ref는 let inputRef = React.useRef(null); 이런 형식을 통해
	reference를 전달받고 이후에 inputRef.current()로 접근함. 
	-setState()는 비동기함수임. react 가 setState를 모아서 한 번에 처리함. 측 render은 
	딱 1번 일어남,...
※ react 에서 못 쓰는 속성 :
	-class : className으로 써야함..
	-for : htmlFor으로 써야함..

※webpack 명령어로 등록하는 법:
	-package.json 에 script의 dev에 webpack
	-npx webpack
	-babel관련 package 깔아야함
		-npm i -D @babel/core
		-npm i @babel/preset-env
		-npm i @babel/preset-react
		-npm i babel-loader 
	※ @babel/preset-env 와 plugins:
		- webpack.config.js 파일에서
			- entry: 항목에 속한 .js , .jsx 파일들을
			- module 항목의 babel-loader 의 설정을 통해
			- 컴파일? 해준다.
		-plugin들의 모음이 preset 이다.		
			-@babel/preset-env

※webpack dev서버와 핫 리로딩 :
	-npm i react-refresh @pmmmwh/react-refresh-webpack-plugin -D
	설치
	- npm i -D webpack-dev-server
	설치 후
	package.json 에서 script 항목 내에 dev항목을 "webpack serve --env development"
	로 바꿔줌...

chapter 3 리엑트 반복문 (map)
※ react 에서는 요소의 속성을 낙타표기법으로
※input 에서 value와 onChange는 함께 지정해야함..
	-아니라면 defaultValue 지정
※map = react 에서의 반복문.
	- [].map(()=>{})
	- map 에서는 key 가 있어야 한다..
	- key 값은 고유해야함!!
	- index는 key값으로 절대로 쓰면 안됨!!성능최적화 할때 안좋음.
	
※react 에서 배열에 값 추가시 arr.push(ele)하면 안됨.
	-변환 감지가 안됨. 그렇기 때문에 render() 이 실행되지 않음
	-고로 
		-기존 배열 복사
		arr2=[...arr,1]
※ shouldComponentUpdate:
	- props 값이나 state 값이 바뀔 때 마다 관련없는 하위 요소들 까지
	랜더가 일어난다. 이런 상황이 많이 발생할 수록 성능이 떨어지게됨...
	- shouldComponentUpdate 라는 메서드를 구현하여 true 를 반환하면
	렌더링을 걸고 false를 반환하면 랜더를 안함.
※pureComponent:
	- shouldComponentUpdate를 자동으로 구현해놓은 컴포넌트
	- state들의 값이 변했는지 여부를 보고 랜더링 여부를 판단함
	- 그런데 배열객체 같은경우는 감지가 힘듦! 
※ hooks 인 경우 {memo} 를 'react' 로부터 import 해서 함수를 memo()
괄호 내부에 감싸준다!.

※createRef 
※render() 함수 내부에 setState 쓰면 안됨! : 무한히 반복될 수 있다.
※props 는 부모가 바꿔야함. 자식에선 readOnly!!
※ 리액트 라이프 사이클:
	class인 경우 :
		constructor -> render -> ref -> componentDidMount
		-> (setState/props 바뀔 때 -> render -> componentDidUpdate)
		상위요소에 의해 소멸 -> componentWillUnmount -> 소멸

21_05_05:
※ useMemo : 복잡한 함수 결과값을 기억
※ useRef : 일반값을 기억
※ useCallback : 함수 자체를 기억함
※ useReducer : hooks 여러개의 state들과 setState함수들을 하나로 묶어줌.
	- useReducer(reducer,initialState)
		-initailState : 초기 state
		-dispatch:
		-reducer: dispatch 내부에 action 객체를 실행해주는 함수?
※ class 형태와는 다르게 hooks 는 state나 props 가 바뀔 때 마다 전체가 다시 실행됨..
※ 